service: ${env:suffix}-scrapper
Description: "Service to store movie information"
plugins:
  - serverless-python-requirements
package:
  exclude:
    - ../../../**
  include:
    - ../../../lambda_src/common_deps/**
    - ../../../lambda_src/scrapper/**
custom:
  pythonRequirements:
    dockerizePip: true
provider:
  name: aws
  runtime: python3.7
  region: "${env:AWS_DEFAULT_REGION}"
  timeout: 300
  memorySize: 128
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "kinesis:PutRecord"
        - "kinesis:PutRecords"
        - "kinesis:GetShardIterator"
        - "kinesis:DescribeStream"
      Resource:
        Fn::ImportValue: KinesisDataProcessingArn-${env:suffix}
    - Effect: "Allow"
      Action:
        - "kinesis:PutRecord"
        - "kinesis:PutRecords"
        - "kinesis:GetShardIterator"
        - "kinesis:DescribeStream"
      Resource:
        Fn::ImportValue: KinesisErrorProcessingArn-${env:suffix}
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "arn:aws:logs:*:*:*"

functions:
  scrap-movie-data:
    handler: lambda_src/scrapper/handler.handle
    MemorySize: 128
    Timeout: 20
    environment:
      LOG_LEVEL: DEBUG
      PROCESS_DATA_STREAM_NAME:
        Fn::ImportValue: KinesisDataProcessingName-${env:suffix}
      PROCESS_ERROR_STREAM_NAME:
        Fn::ImportValue: KinesisErrorProcessingName-${env:suffix}
      SCRAP_URL: ${env:url}
    events:
      - http:
          path: scrap_movies
          method: get